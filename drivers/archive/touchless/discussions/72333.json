[
  {
    "Id": "246992",
    "ThreadId": "72333",
    "Html": "<p><span style=\"font-size:10pt;color:black\">Hi guys, this may be a basic question and my apologies early if it is (I haven&rsquo;t done C#/C++ since university and I just spent 12 hours today trying to figure it out). </span></p>\r\n<p><span style=\"font-size:10pt;color:black\">My code is the same as &quot;sample&quot; walkthrough up to making the marker and before the drawing.&nbsp; I want to continuously display the X and Y coordinates in a LABEL on the&nbsp;FORM as the program update with each new frame of the webcam.&nbsp; I thought you would put code in under:</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>void c_OnImageCaptured(object sender, CameraEventArgs e)</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>or</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>void m_OnChange(object sender, MarkerEventArgs e)</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>because these run with each new frame (or so I think).&nbsp; But when I tried to enter something like:</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>label1.Text = x_coordinate.ToString();&nbsp;&nbsp;&nbsp; where x_coordinate = e.EventData.X</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>it gave me a &quot;cross thread operation not valid&quot; error.&nbsp; I'm not too sure what a thread is, but I gather each event function is a thread?&nbsp; I moved the code to a new button and it works fine but it only updates when you click the button. </span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>How do I make it update continuously with the frames? I will need to run more logic code and a serialport output write at this interval as well automatically with the frames.</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>&nbsp;</span></p>\r\n<p><span style=\"font-size:10pt;color:black\" lang=EN>Thanks for your help!!&nbsp;</span></p>\r\n<p><span style=\"font-size:x-small\"><span lang=EN><span lang=EN>&nbsp;</span></span></span></p>",
    "PostedDate": "2009-10-18T00:27:27.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246993",
    "ThreadId": "72333",
    "Html": "<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">//Here is the code:</span></pre>\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.ComponentModel;\r\n<span style=\"color:Blue\">using</span> System.Data;\r\n<span style=\"color:Blue\">using</span> System.Drawing;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n<span style=\"color:Blue\">using</span> System.Windows.Forms;\r\n<span style=\"color:Blue\">using</span> TouchlessLib;\r\n<span style=\"color:Blue\">using</span> WebCamLib;\r\n<span style=\"color:Blue\">using</span> System.Drawing.Imaging;\r\n\r\n<span style=\"color:Blue\">namespace</span> WindowsFormsApplication1\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span> Form1 : Form\r\n    {\r\n\r\n        <span style=\"color:Blue\">double</span> xdouble;\r\n        <span style=\"color:Blue\">double</span> ydouble;      \r\n\r\n        <span style=\"color:Blue\">public</span> Form1()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        TouchlessMgr _touch = <span style=\"color:Blue\">new</span> TouchlessMgr();\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> Form1_Load(<span style=\"color:Blue\">object</span> sender, EventArgs e)\r\n        {\r\n             \r\n            <span style=\"color:Blue\">foreach</span> (Camera c <span style=\"color:Blue\">in</span> _touch.Cameras)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (c != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    _touch.CurrentCamera = c;\r\n                    c.OnImageCaptured += <span style=\"color:Blue\">new</span> EventHandler&lt;CameraEventArgs&gt;(c_OnImageCaptured);\r\n                    <span style=\"color:Blue\">break</span>;\r\n                }\r\n            }\r\n            pictureBox1.Paint += <span style=\"color:Blue\">new</span> PaintEventHandler(pictureBox1_Paint);\r\n            \r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> pictureBox1_Paint(<span style=\"color:Blue\">object</span> sender, PaintEventArgs e)\r\n        {\r\n            <span style=\"color:Blue\">lock</span> (<span style=\"color:Blue\">this</span>)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (_b != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    e.Graphics.DrawImageUnscaledAndClipped(_b, pictureBox1.ClientRectangle);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        Bitmap _b;\r\n\r\n        <span style=\"color:Blue\">void</span> c_OnImageCaptured(<span style=\"color:Blue\">object</span> sender, CameraEventArgs e)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (button1.Enabled)\r\n            {\r\n                _b = e.Image;\r\n                pictureBox1.Invalidate();\r\n                                \r\n            }\r\n            \r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> button1_Click(<span style=\"color:Blue\">object</span> sender, EventArgs e)\r\n        {\r\n            Bitmap c = _touch.CurrentCamera.GetCurrentImage();\r\n            pictureBox1.BackgroundImage = c;\r\n            button1.Enabled = <span style=\"color:Blue\">false</span>;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> pictureBox1_MouseClick(<span style=\"color:Blue\">object</span> sender, MouseEventArgs e)\r\n        {\r\n            \r\n            Marker m = _touch.AddMarker(<span style=\"color:#A31515\">&quot;marker&quot;</span>, (Bitmap)pictureBox1.BackgroundImage, <span style=\"color:Blue\">new</span> Point (e.X, e.Y), 10);\r\n            m.Highlight = <span style=\"color:Blue\">true</span>;\r\n            m.OnChange += <span style=\"color:Blue\">new</span> EventHandler&lt;MarkerEventArgs&gt;(m_OnChange);\r\n            button1.Enabled = <span style=\"color:Blue\">true</span>;\r\n                   \r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> m_OnChange(<span style=\"color:Blue\">object</span> sender, MarkerEventArgs e)\r\n        {\r\n\r\n            xdouble = e.EventData.X;\r\n            ydouble = e.EventData.Y;\r\n                              \r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> button2_Click(<span style=\"color:Blue\">object</span> sender, EventArgs e)\r\n        {\r\n                      \r\n                label1.Text = <span style=\"color:#A31515\">&quot;X = &quot;</span> + xdouble.ToString();\r\n                label2.Text = <span style=\"color:#A31515\">&quot;Y = &quot;</span> + ydouble.ToString();\r\n          \r\n        }\r\n\r\n            \r\n    }\r\n    \r\n}\r\n</pre>\r\n</div>",
    "PostedDate": "2009-10-18T00:35:37.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247031",
    "ThreadId": "72333",
    "Html": "<p>Hi Mahhari,</p>\r\n<p>the location is choosed exactly right, the Exception you encounter is rather &quot;normal&quot;:</p>\r\n<p>You can only change GUI values in the thread that created the GUI element. Fortunately, MS has built in support for your problem to &quot;switch the thread&quot;:<br>(The trick in in the if (InvokeRequired) line ;))</p>\r\n<pre>void m_OnChange(object sender, MarkerEventArgs e)\r\n{\r\n    this.UpdateMarkerDataInUI(e.EventData);\r\n}\r\n\r\nprivate void UpdateMarkerDataInUI(MarkerEventData data)\r\n{\r\n    if (this.InvokeRequired)\r\n    {\r\n        /* Self-Invoke in the GUI thread if necessary */\r\n        this.BeginInvoke(new Action(\r\n            UpdateMarkerDataInUI), new object[] { data });\r\n    }\r\n    else\r\n    {\r\n        this.label1.Text = String.Format(&quot;X = {0}&quot;, data.X);\r\n        this.label2.Text = String.Format(&quot;Y = {0}&quot;, data.Y);\r\n    }\r\n}\r</pre>\r\n<p>You can also look into the TouchlessDemo project, File TouchlessDemo.cs, starting Line 259, where exactly this is done, too.</p>\r\n<p>HTH, Florian</p>\r\n<p>&nbsp;</p>\r\n<p>(edit: added reference to demo project)</p>",
    "PostedDate": "2009-10-18T06:58:32.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247060",
    "ThreadId": "72333",
    "Html": "<p>Hi eFloh,</p>\r\n<p>Thanks for the reply!&nbsp; I added your code to my code and I get&nbsp;this build error:</p>\r\n<p>No overload for 'UpdateMarkerDataInUI' matches delegate 'System.Action'&nbsp;</p>\r\n<p><span style=\"font-size:x-small\">&nbsp;</span></p>\r\n<p>for line 102 which is:</p>\r\n<p>this.BeginInvoke(<span style=\"text-decoration:underline\">new Action(UpdateMarkerDataInUI),</span> new object[] { data });</p>\r\n<p>What can I do to fix this? I tried a few things with no luck (most of this code is new to me), so I thought I better come to you!</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<p>&nbsp;</p>\r\n</p>",
    "PostedDate": "2009-10-18T11:26:48.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247115",
    "ThreadId": "72333",
    "Html": "<p>Try&nbsp;this.BeginInvoke(new Action<strong>&lt;<span style=\"font-family:Consolas, 'Courier New', Courier, monospace;font-weight:normal;white-space:pre\"><strong>MarkerEventData</strong><span style=\"font-family:'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif;white-space:normal\"><strong>&gt;</strong>(UpdateMarkerDataInUI), new object[] { data });</span></span></strong></p>\r\n<p><strong><span style=\"font-family:Consolas, 'Courier New', Courier, monospace;font-weight:normal;white-space:pre\"><span style=\"font-family:'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif;white-space:normal\">Read more about Action delegates at:&nbsp;<a href=\"http://msdn.microsoft.com/en-us/library/018hxwa8.aspx\">http://msdn.microsoft.com/en-us/library/018hxwa8.aspx</a></span></span></strong></p>\r\n<p><span style=\"color:#30332d\"><span>&nbsp;<span style=\"color:#000000\">See similar code in method OnImageCaptured in <a href=\"http://touchless.codeplex.com/sourcecontrol/changeset/view/31008?projectName=touchless#351627\">TouchlessDemo.cs</a>&nbsp;calling&nbsp;UpdateFPSInUI.</span></span></span></p>",
    "PostedDate": "2009-10-18T17:34:45.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247130",
    "ThreadId": "72333",
    "Html": "<p>That worked Mike!</p>\r\n<p>Thanks both of you guys!</p>\r\n<p>(your touchless sdk is about to revolutionize how people interface with first person shooter games on xbox/ps3)</p>",
    "PostedDate": "2009-10-18T19:08:49.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247134",
    "ThreadId": "72333",
    "Html": "<p>For all my future code I want to execute with every fame update, I should have it under the <strong>else</strong> section with the <strong>this.label1.Text</strong>?</p>\r\n<p>Will I need to have the <strong>this</strong> command before the normal commands as it is with <strong>label1</strong>?</p>\r\n<p>for example:</p>\r\n<p>this.SerialPort port1 = new SerialPort (&quot;com11&quot;, 57600, ......);</p>\r\n<p>this.port1.Open();</p>\r\n<p>this.port1.Write(new byte[ ] {x_coordinate, y_coordinate}, 0,2);</p>\r\n<p>this.port1.Close();</p>\r\n<p>&nbsp;</p>\r\n<p>I internet searched the <strong>this </strong>command but couldn't find any useful information on it.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks again!</p>",
    "PostedDate": "2009-10-18T19:42:40.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247566",
    "ThreadId": "72333",
    "Html": "<p>Hi again,</p>\r\n<p>Maybe I'm asking the wrong question.&nbsp; How can I take the marker X and Y data and bring it into another method?&nbsp; If I call the method from within m_OnChange(...) I will&nbsp;still have the cross-thread issue right? &nbsp;</p>\r\n<p>(I bought a Visual 2008 C# book, but It doesn't really talk about this.)</p>",
    "PostedDate": "2009-10-19T22:37:16.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247568",
    "ThreadId": "72333",
    "Html": "<p>&quot;this&quot; is simply a reference to the instance of the object on which the method is being executed.</p>\r\n<p>&quot;this&quot; keyword: <a href=\"http://msdn.microsoft.com/en-us/library/dk1507sz(VS.71).aspx\">http://msdn.microsoft.com/en-us/library/dk1507sz(VS.71).aspx</a></p>\r\n<p>Here's BeginInvoke: <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.forms.control.begininvoke.aspx\">http://msdn.microsoft.com/en-us/library/system.windows.forms.control.begininvoke.aspx</a></p>\r\n<p>This explains BeginInvoke's&nbsp;use better: <a href=\"http://msdn.microsoft.com/en-us/library/2e08f6yc(VS.71).aspx\">http://msdn.microsoft.com/en-us/library/2e08f6yc(VS.71).aspx</a></p>\r\n<p>If you want to access the marker data from a separate thread (like a UI thread in the case of updating a label), you'll ideally employ thread-safe accessors and mutators for the shared data. Thread safety is a large topic in which I don't claim to be an expert. General programming reference guides should cover the topic sufficiently for you. Here's a short MSDN guide to Thread Synchronization in C#: <a href=\"http://msdn.microsoft.com/en-us/library/ms173179.aspx\">http://msdn.microsoft.com/en-us/library/ms173179.aspx</a>&nbsp;that goes beyond BeginInvoke.</p>\r\n<p>Keep us up to date on your project; we like hearing about creative uses for Touchless SDK. (Are you using XIM360?)</p>\r\n<p>Good luck, I hope we have been helpful.</p>\r\n<p>- Mike</p>",
    "PostedDate": "2009-10-19T23:05:33.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "248515",
    "ThreadId": "72333",
    "Html": "<p>Well, I think everything is said by Mike, The generic parameter was killed by my html-source editing, sorry.</p>\r\n<p>But just to clarify your questions:</p>\r\n<p>I personally use this whenever I access global (class member) fields or properties. This makes it clear to the reader that these are not locally declared variables and second ensures that, when someone later adds a local variable with the same name the meaning of the existing code is not changed. I think that depends a bit on your attitude whether you use it or not.</p>\r\n<p>&nbsp;</p>\r\n<p>And in the code, the if-Part is entered when the execution is &quot;not in the gui thread&quot; and then calls itself in the else-part. So you have to add all code that acts with gui elements to the else part, any other code _could_ be in the if part, but its simply more clean to do everything in the else part. You could also move the if into the OnChanged-Eventhandler to clean it up further:</p>\r\n<pre>void m_OnChange(object sender, MarkerEventArgs e)\r\n{\r\n    if (this.InvokeRequired)\r\n    {\r\n        /* Invoke in the GUI thread if necessary */\r\n        this.BeginInvoke(new Action&lt;MarkerEventData&gt;(\r\n            this.MarkerChanged), new object[] { e.EventData });\r\n    }\r\n    else\r\n    {\r\n        this.MarkerChanged(e.EventData);\r\n    }\r\n}\r\n\r\nprivate void MarkerChanged(MarkerEventData data)\r\n{\r\n   this.label1.Text = String.Format(&quot;X = {0}&quot;, data.X);\r\n   this.label2.Text = String.Format(&quot;Y = {0}&quot;, data.Y);\r\n}\r</pre>\r\n<p>This way, the MarkerChanged method is always called in the UI thread and you don't have the ugly invoke inside your business method.<br>Of Course, you could also pass the whole MarkerEventArgs object if you'd like.</p>\r\n<p>What Mike said about threading is an imporant point:</p>\r\n<p>You pass the MarkerEventData object as reference to another thread. No one guarantees you that the data will not be changed in the invoking (or any other) thread between the call to &quot;BeginInvoke&quot; and the execution of your code in the MarkerChanged method (so called race conditions). You have to ensure this by locking the fields yourself and/or using copied data.<br>Multithreading is not trivial to use and I suggest you to read and think well before using.</p>\r\n<p>Again said, the code above DOES HAVE race conditions.</p>\r\n<p>But in this case, no harm is done as the touchless lib will create a new instance of the MarkerEventArgs and MarkerEventData when thenext image is parsed. So the MarkerEventData object you hold in your hand in the GUI thread will not change any further.<br>This does not apply to the MarkerEventArgs.Marker object. This is a reference to the (one and only) marker objected created with AddMarker.<br>This sample shows a race condition changing the SmoothingEnabled marker property:</p>\r\n<pre>void m_OnChange(object sender, MarkerEventArgs e)\r\n{\r\n    e.EventMarker.SmoothingEnabled = true;\r\n    this.BeginInvoke(new Action&lt;Marker&gt;(\r\n        this.MarkerRaceCondition), new object[] { e.EventMarker });\r\n   e.EventMarker.SmoothingEnabled = false;\r\n}\r\n\r\nprivate void MarkerRaceCondition(Marker m)\r\n{\r\n   System.Diagnostics.Debug.WriteLine(\r\n       &quot;GUI Thread smoothing info before sleep: &quot; + m.SmoothingEnabled);\r\n   Thread.Sleep(3000);\r\n   System.Diagnostics.Debug.WriteLine(\r\n       &quot;GUI Thread smoothing info after sleep: &quot; + m.SmoothingEnabled);\r\n}</pre>\r\n<p>The SmoothingEnabled property will at least in the &quot;after sleep&quot; line show the value &quot;false&quot;, before the sleep I cannot say, this really depends on the order in which the CLR will call your code.<br>(infact, even after the sleep, the value may still be true, but 3 seconds delay give plenty of time for the other thread to execute a single line ;))</p>\r\n<p>&nbsp;</p>\r\n<p>To answer your question: You can copy the X and Y values into new variables and invoke your method with these copies. As they are fully under your control, no one (except you, hehe) will change them while you wait for your other thread to execute...</p>\r\n<p>double x = e.EventData.X;<br>double y = e.EventData.Y;<br>this.BeginInvoke(new Action&lt;double, double&gt;(         this.SafeSample), new object[] { x, y });<br><br>private void MarkerRaceCondition(double x, double y) { /* here you have your private x and y values, as double is a value type. */ }</p>\r\n<p>(you could even directly move the e.EventData.X/Y into the object[] above, because they are value types. For refernece type members, such as the Marker object you would have to use the Clone() method or such in order to create the &quot;private copy&quot;).</p>\r\n<p>&nbsp;</p>\r\n<p>huh, lots of text...</p>",
    "PostedDate": "2009-10-22T04:36:51.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "249067",
    "ThreadId": "72333",
    "Html": "<p>Sweet! that helps out a lot! I got my program working now.&nbsp; I use &quot;this.&quot; keyword for all my global variables and it does clean it up and make it easier to read - thanks for that tip. You guys are going to make a programmer out of me yet =)</p>\r\n<p>I need to read up more about Threads and Threading.</p>\r\n<p>Thanks again!</p>",
    "PostedDate": "2009-10-23T10:40:43.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]